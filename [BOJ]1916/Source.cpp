//https://www.acmicpc.net/problem/1916

/*
문제
n(1≤n≤1,000)개의 도시가 있다. 그리고 한 도시에서 출발하여 다른 도시에 도착하는 m(1≤m≤100,000)개의 버스가 있다. 우리는 A번째 도시에서 B번째 도시까지 가는데 드는 버스 비용을 최소화 시키려고 한다. 그러면 A번째 도시에서 B번째 도시 까지 가는데 드는 최소비용을 출력하여라.

입력
첫째 줄에 도시의 개수 n(1≤n≤1,000)이 주어지고 둘째 줄에는 버스의 개수 m(1≤m≤100,000)이 주어진다. 그리고 셋째 줄부터 m+2줄까지 다음과 같은 버스의 정보가 주어진다. 먼저 처음에는 그 버스의 출발 도시의 번호가 주어진다. 그리고 그 다음에는 도착지의 도시 번호가 주어지고 또 그 버스 비용이 주어진다. 버스 비용은 0보다 크거나 같고, 100,000보다 작은 정수이다.

그리고 m+3째 줄에는 우리가 구하고자 하는 구간 출발점의 도시번호와 도착점의 도시번호가 주어진다. 출발점에서 도착점을 갈 수 있는 경우만 입력으로 주어진다.

출력
첫째 줄에 출발 도시에서 도착 도시까지 가는데 드는 최소 비용을 출력한다.

예제 입력  복사
5
8
1 2 2
1 3 3
1 4 1
1 5 10
2 4 2
3 4 1
3 5 1
4 5 3
1 5
예제 출력  복사
4
*/

#include <iostream>
#include <queue>
#include <cstring>
#include <vector>

using namespace std;
const int INF = 1e9;

int main() {
	priority_queue<pair<int , long long int>> pq;
	vector<vector<pair<int, int>>> adj;
	vector<long long int> dist;
	int n, m;
	int start, destination;

	cin >> n >> m;

	adj = vector<vector<pair<int, int>>>(n + 1);
	dist = vector<long long int>(n + 1, INF);

	for (int i = 0; i < m; i++) {
		int from, to, cost;

		cin >> from >> to >> cost;

		adj[from].push_back({ to, cost });
	}

	cin >> start >> destination;
	
	pq.push({ start, 0 });
	while (!pq.empty()) {
		int here = pq.top().first;
		long long int cost = -pq.top().second;
		pq.pop();

		if (dist[here] < cost) continue;

		for (int i = 0; i < adj[here].size(); i++) {
			int there = adj[here][i].first;
			int next_cost = cost + adj[here][i].second;

			if (dist[there] > next_cost) {
				dist[there] = next_cost;
				pq.push({ there, -next_cost });
			}
		}
	}

	cout << dist[destination];
}